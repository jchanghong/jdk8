#warn This file is preprocessed before being compiled
package java.nio.charset;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.lang.ref.WeakReference;
import java.nio.charset.CoderMalfunctionError;                  // javadoc
import java.util.Arrays;
public abstract class Charset$Coder$ {
    private final Charset charset;
    private final float average$ItypesPerOtype$;
    private final float max$ItypesPerOtype$;
    private $replType$ replacement;
    private CodingErrorAction malformedInputAction
        = CodingErrorAction.REPORT;
    private CodingErrorAction unmappableCharacterAction
        = CodingErrorAction.REPORT;
    // Internal states
    //
    private static final int ST_RESET   = 0;
    private static final int ST_CODING  = 1;
    private static final int ST_END     = 2;
    private static final int ST_FLUSHED = 3;
    private int state = ST_RESET;
    private static String stateNames[]
        = { "RESET", "CODING", "CODING_END", "FLUSHED" };
    {#if[encoder]?protected:private}
    Charset$Coder$(Charset cs,
                   float average$ItypesPerOtype$,
                   float max$ItypesPerOtype$,
                   $replType$ replacement)
    {
        this.charset = cs;
        if (average$ItypesPerOtype$ <= 0.0f)
            throw new IllegalArgumentException("Non-positive "
                                               + "average$ItypesPerOtype$");
        if (max$ItypesPerOtype$ <= 0.0f)
            throw new IllegalArgumentException("Non-positive "
                                               + "max$ItypesPerOtype$");
        if (!Charset.atBugLevel("1.4")) {
            if (average$ItypesPerOtype$ > max$ItypesPerOtype$)
                throw new IllegalArgumentException("average$ItypesPerOtype$"
                                                   + " exceeds "
                                                   + "max$ItypesPerOtype$");
        }
        this.replacement = replacement;
        this.average$ItypesPerOtype$ = average$ItypesPerOtype$;
        this.max$ItypesPerOtype$ = max$ItypesPerOtype$;
        replaceWith(replacement);
    }
    protected Charset$Coder$(Charset cs,
                             float average$ItypesPerOtype$,
                             float max$ItypesPerOtype$)
    {
        this(cs,
             average$ItypesPerOtype$, max$ItypesPerOtype$,
             $defaultRepl$);
    }
    public final Charset charset() {
        return charset;
    }
    public final $replType$ replacement() {
#if[decoder]
        return replacement;
#end[decoder]
#if[encoder]
        return Arrays.copyOf(replacement, replacement.$replLength$);
#end[encoder]
    }
    public final Charset$Coder$ replaceWith($replType$ newReplacement) {
        if (newReplacement == null)
            throw new IllegalArgumentException("Null replacement");
        int len = newReplacement.$replLength$;
        if (len == 0)
            throw new IllegalArgumentException("Empty replacement");
        if (len > max$ItypesPerOtype$)
            throw new IllegalArgumentException("Replacement too long");
#if[decoder]
        this.replacement = newReplacement;
#end[decoder]
#if[encoder]
        if (!isLegalReplacement(newReplacement))
            throw new IllegalArgumentException("Illegal replacement");
        this.replacement = Arrays.copyOf(newReplacement, newReplacement.$replLength$);
#end[encoder]
        implReplaceWith(this.replacement);
        return this;
    }
    protected void implReplaceWith($replType$ newReplacement) {
    }
#if[encoder]
    private WeakReference<CharsetDecoder> cachedDecoder = null;
    public boolean isLegalReplacement(byte[] repl) {
        WeakReference<CharsetDecoder> wr = cachedDecoder;
        CharsetDecoder dec = null;
        if ((wr == null) || ((dec = wr.get()) == null)) {
            dec = charset().newDecoder();
            dec.onMalformedInput(CodingErrorAction.REPORT);
            dec.onUnmappableCharacter(CodingErrorAction.REPORT);
            cachedDecoder = new WeakReference<CharsetDecoder>(dec);
        } else {
            dec.reset();
        }
        ByteBuffer bb = ByteBuffer.wrap(repl);
        CharBuffer cb = CharBuffer.allocate((int)(bb.remaining()
                                                  * dec.maxCharsPerByte()));
        CoderResult cr = dec.decode(bb, cb, true);
        return !cr.isError();
    }
#end[encoder]
    public CodingErrorAction malformedInputAction() {
        return malformedInputAction;
    }
    public final Charset$Coder$ onMalformedInput(CodingErrorAction newAction) {
        if (newAction == null)
            throw new IllegalArgumentException("Null action");
        malformedInputAction = newAction;
        implOnMalformedInput(newAction);
        return this;
    }
    protected void implOnMalformedInput(CodingErrorAction newAction) { }
    public CodingErrorAction unmappableCharacterAction() {
        return unmappableCharacterAction;
    }
    public final Charset$Coder$ onUnmappableCharacter(CodingErrorAction
                                                      newAction)
    {
        if (newAction == null)
            throw new IllegalArgumentException("Null action");
        unmappableCharacterAction = newAction;
        implOnUnmappableCharacter(newAction);
        return this;
    }
    protected void implOnUnmappableCharacter(CodingErrorAction newAction) { }
    public final float average$ItypesPerOtype$() {
        return average$ItypesPerOtype$;
    }
    public final float max$ItypesPerOtype$() {
        return max$ItypesPerOtype$;
    }
    public final CoderResult $code$($Itype$Buffer in, $Otype$Buffer out,
                                    boolean endOfInput)
    {
        int newState = endOfInput ? ST_END : ST_CODING;
        if ((state != ST_RESET) && (state != ST_CODING)
            && !(endOfInput && (state == ST_END)))
            throwIllegalStateException(state, newState);
        state = newState;
        for (;;) {
            CoderResult cr;
            try {
                cr = $code$Loop(in, out);
            } catch (BufferUnderflowException x) {
                throw new CoderMalfunctionError(x);
            } catch (BufferOverflowException x) {
                throw new CoderMalfunctionError(x);
            }
            if (cr.isOverflow())
                return cr;
            if (cr.isUnderflow()) {
                if (endOfInput && in.hasRemaining()) {
                    cr = CoderResult.malformedForLength(in.remaining());
                    // Fall through to malformed-input case
                } else {
                    return cr;
                }
            }
            CodingErrorAction action = null;
            if (cr.isMalformed())
                action = malformedInputAction;
            else if (cr.isUnmappable())
                action = unmappableCharacterAction;
            else
                assert false : cr.toString();
            if (action == CodingErrorAction.REPORT)
                return cr;
            if (action == CodingErrorAction.REPLACE) {
                if (out.remaining() < replacement.$replLength$)
                    return CoderResult.OVERFLOW;
                out.put(replacement);
            }
            if ((action == CodingErrorAction.IGNORE)
                || (action == CodingErrorAction.REPLACE)) {
                // Skip erroneous input either way
                in.position(in.position() + cr.length());
                continue;
            }
            assert false;
        }
    }
    public final CoderResult flush($Otype$Buffer out) {
        if (state == ST_END) {
            CoderResult cr = implFlush(out);
            if (cr.isUnderflow())
                state = ST_FLUSHED;
            return cr;
        }
        if (state != ST_FLUSHED)
            throwIllegalStateException(state, ST_FLUSHED);
        return CoderResult.UNDERFLOW; // Already flushed
    }
    protected CoderResult implFlush($Otype$Buffer out) {
        return CoderResult.UNDERFLOW;
    }
    public final Charset$Coder$ reset() {
        implReset();
        state = ST_RESET;
        return this;
    }
    protected void implReset() { }
    protected abstract CoderResult $code$Loop($Itype$Buffer in,
                                              $Otype$Buffer out);
    public final $Otype$Buffer $code$($Itype$Buffer in)
        throws CharacterCodingException
    {
        int n = (int)(in.remaining() * average$ItypesPerOtype$());
        $Otype$Buffer out = $Otype$Buffer.allocate(n);
        if ((n == 0) && (in.remaining() == 0))
            return out;
        reset();
        for (;;) {
            CoderResult cr = in.hasRemaining() ?
                $code$(in, out, true) : CoderResult.UNDERFLOW;
            if (cr.isUnderflow())
                cr = flush(out);
            if (cr.isUnderflow())
                break;
            if (cr.isOverflow()) {
                n = 2*n + 1;    // Ensure progress; n might be 0!
                $Otype$Buffer o = $Otype$Buffer.allocate(n);
                out.flip();
                o.put(out);
                out = o;
                continue;
            }
            cr.throwException();
        }
        out.flip();
        return out;
    }
#if[decoder]
    public boolean isAutoDetecting() {
        return false;
    }
    public boolean isCharsetDetected() {
        throw new UnsupportedOperationException();
    }
    public Charset detectedCharset() {
        throw new UnsupportedOperationException();
    }
#end[decoder]
#if[encoder]
    private boolean canEncode(CharBuffer cb) {
        if (state == ST_FLUSHED)
            reset();
        else if (state != ST_RESET)
            throwIllegalStateException(state, ST_CODING);
        CodingErrorAction ma = malformedInputAction();
        CodingErrorAction ua = unmappableCharacterAction();
        try {
            onMalformedInput(CodingErrorAction.REPORT);
            onUnmappableCharacter(CodingErrorAction.REPORT);
            encode(cb);
        } catch (CharacterCodingException x) {
            return false;
        } finally {
            onMalformedInput(ma);
            onUnmappableCharacter(ua);
            reset();
        }
        return true;
    }
    public boolean canEncode(char c) {
        CharBuffer cb = CharBuffer.allocate(1);
        cb.put(c);
        cb.flip();
        return canEncode(cb);
    }
    public boolean canEncode(CharSequence cs) {
        CharBuffer cb;
        if (cs instanceof CharBuffer)
            cb = ((CharBuffer)cs).duplicate();
        else
            cb = CharBuffer.wrap(cs.toString());
        return canEncode(cb);
    }
#end[encoder]
    private void throwIllegalStateException(int from, int to) {
        throw new IllegalStateException("Current state = " + stateNames[from]
                                        + ", new state = " + stateNames[to]);
    }
}
